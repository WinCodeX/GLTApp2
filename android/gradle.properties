# Project-wide Gradle settings.

# IDE (e.g. Android Studio) users:
# Gradle settings configured through the IDE *will override*
# any settings specified in this file.

# For more details on how to configure your build environment visit
# http://www.gradle.org/docs/current/userguide/build_environment.html

# ════════════════════════════════════════════════════════════════
# MEMORY CONFIGURATION - FIXED FOR OutOfMemoryError
# ════════════════════════════════════════════════════════════════
# Specifies the JVM arguments used for the daemon process.
# The setting is particularly useful for tweaking memory settings.
# 
# CHANGED: -Xmx2048m → -Xmx4096m (2GB → 4GB)
# ADDED: -XX:+HeapDumpOnOutOfMemoryError (creates dump for debugging)
# ADDED: -Dfile.encoding=UTF-8 (ensures UTF-8 encoding)
# 
# If you still get OutOfMemoryError, increase to -Xmx6144m (6GB)
org.gradle.jvmargs=-Xmx4096m -XX:MaxMetaspaceSize=512m -XX:+HeapDumpOnOutOfMemoryError -Dfile.encoding=UTF-8

# ════════════════════════════════════════════════════════════════
# GRADLE PERFORMANCE OPTIMIZATION
# ════════════════════════════════════════════════════════════════

# When configured, Gradle will run in incubating parallel mode.
# This option should only be used with decoupled projects. More details, visit
# http://www.gradle.org/docs/current/userguide/multi_project_builds.html#sec:decoupled_projects
org.gradle.parallel=true

# Enable Gradle daemon for faster builds (keeps Gradle running in background)
org.gradle.daemon=true

# ⚠️ EXPO-UPDATES FIX: Disable configuration cache due to plugin compatibility issues
# Enable configuration cache (Gradle 8.0+) for significantly faster builds
# CHANGED: true → false (fixes expo-updates plugin error)
org.gradle.configuration-cache=false
org.gradle.configuration-cache.problems=warn

# Enable build cache to reuse outputs from previous builds
org.gradle.caching=true

# ════════════════════════════════════════════════════════════════
# ANDROID CONFIGURATION
# ════════════════════════════════════════════════════════════════

# AndroidX package structure to make it clearer which packages are bundled with the
# Android operating system, and which are packaged with your app's APK
# https://developer.android.com/topic/libraries/support-library/androidx-rn
android.useAndroidX=true

# Enable AAPT2 PNG crunching
android.enablePngCrunchInReleaseBuilds=true

# Enable minification in release builds
android.enableMinifyInReleaseBuilds=true

# SDK versions
android.compileSdkVersion=35
android.targetSdkVersion=35

# Non-transitive R classes (reduces build time and memory usage)
android.nonTransitiveRClass=true

# Disable PNG crunching in debug builds (faster debug builds)
android.enablePngCrunchInDebugBuilds=false

# ════════════════════════════════════════════════════════════════
# REACT NATIVE ARCHITECTURE CONFIGURATION
# ════════════════════════════════════════════════════════════════

# Use this property to specify which architecture you want to build.
# You can also override it from the CLI using
# ./gradlew <task> -PreactNativeArchitectures=x86_64
# 
# OPTIMIZATION TIP: Remove x86 and x86_64 if you only deploy to physical devices
# This reduces build time and memory usage by ~40%
# For physical devices only: reactNativeArchitectures=armeabi-v7a,arm64-v8a
reactNativeArchitectures=armeabi-v7a,arm64-v8a,x86,x86_64

# Use this property to enable support to the new architecture.
# This will allow you to use TurboModules and the Fabric render in
# your application. You should enable this flag either if you want
# to write custom TurboModules/Fabric components OR use libraries that
# are providing them.
newArchEnabled=true

# ════════════════════════════════════════════════════════════════
# JAVASCRIPT ENGINE CONFIGURATION
# ════════════════════════════════════════════════════════════════

# Use this property to enable or disable the Hermes JS engine.
# If set to false, you will be using JSC instead.
hermesEnabled=true

# ════════════════════════════════════════════════════════════════
# EXPO CONFIGURATION
# ════════════════════════════════════════════════════════════════

# Enable GIF support in React Native images (~200 B increase)
expo.gif.enabled=true

# Enable webp support in React Native images (~85 KB increase)
expo.webp.enabled=true

# Enable animated webp support (~3.4 MB increase)
# CHANGED: false → true (fixes R8 minification missing Fresco classes error)
expo.webp.animated=true

# Enable network inspector
EX_DEV_CLIENT_NETWORK_INSPECTOR=true

# Use legacy packaging to compress native libraries in the resulting APK.
expo.useLegacyPackaging=false

# Specifies whether the app is configured to use edge-to-edge via the app config or plugin
# WARNING: This property has been deprecated and will be removed in Expo SDK 55. Use `edgeToEdgeEnabled` or `react.edgeToEdgeEnabled` to determine whether the project is using edge-to-edge.
expo.edgeToEdgeEnabled=true

# ════════════════════════════════════════════════════════════════
# UI CONFIGURATION
# ════════════════════════════════════════════════════════════════

# Use this property to enable edge-to-edge display support.
# This allows your app to draw behind system bars for an immersive UI.
# Note: Only works with ReactActivity and should not be used with custom Activity.
edgeToEdgeEnabled=true

# ════════════════════════════════════════════════════════════════
# TROUBLESHOOTING NOTES
# ════════════════════════════════════════════════════════════════
# 
# If you still get "OutOfMemoryError: Java heap space":
# 
# 1. Increase memory to 6GB:
# org.gradle.jvmargs=-Xmx6144m -XX:MaxMetaspaceSize=512m -XX:+HeapDumpOnOutOfMemoryError -Dfile.encoding=UTF-8
# 
# 2. Close other applications to free up RAM
# 
# 3. Stop Gradle daemon and rebuild:
# cd android
# ./gradlew --stop
# ./gradlew clean
# ./gradlew assembleRelease
# 
# 4. Build only for physical devices (removes x86/x86_64):
# reactNativeArchitectures=armeabi-v7a,arm64-v8a
# 
# 5. Disable new architecture temporarily:
# newArchEnabled=false
# 
# ════════════════════════════════════════════════════════════════
# 
# ✅ FRESCO IMAGE FORMAT FIX APPLIED:
# - Changed expo.webp.animated from false to true
# - This resolves R8 minification errors with missing Fresco classes:
#   * com.facebook.imagepipeline.cache.AnimatedCache
#   * com.facebook.imagepipeline.cache.AnimationFrames
#   * com.facebook.imagepipeline.nativecode.WebpTranscoder
#   * com.facebook.imagepipeline.nativecode.WebpTranscoderImpl
# - Adds ~3.4 MB to APK size but prevents build failures
# 
# ✅ EXPO-UPDATES COMPATIBILITY FIX APPLIED:
# - Changed org.gradle.configuration-cache from true to false
# - This resolves the "Unable to use Project with configuration cache enabled" error
# - The expo-updates plugin requires configuration cache to be disabled
# - You can re-enable this setting once expo-updates plugin adds full support
# 
# ════════════════════════════════════════════════════════════════