apply plugin: "com.android.application"
apply plugin: "org.jetbrains.kotlin.android"
apply plugin: "com.facebook.react"
apply plugin: 'com.google.gms.google-services'

def projectRoot = rootDir.getAbsoluteFile().getParentFile().getAbsolutePath()

/**
 * ✅ EXPO UPDATES CONFIGURATION
 * The expo-updates plugin is autolinked through expo-modules-autolinking.
 * Configuration comes from app.json automatically.
 * DO NOT manually apply 'expo-updates' plugin - it's handled by autolinking.
 */

/**
 * React Native Configuration
 * Uses Expo CLI for bundling to ensure proper expo-updates integration
 */
react {
    entryFile = file(["node", "-e", "require('expo/scripts/resolveAppEntry')", projectRoot, "android", "absolute"].execute(null, rootDir).text.trim())
    reactNativeDir = new File(["node", "--print", "require.resolve('react-native/package.json')"].execute(null, rootDir).text.trim()).getParentFile().getAbsoluteFile()
    hermesCommand = new File(["node", "--print", "require.resolve('react-native/package.json')"].execute(null, rootDir).text.trim()).getParentFile().getAbsolutePath() + "/sdks/hermesc/%OS-BIN%/hermesc"
    codegenDir = new File(["node", "--print", "require.resolve('@react-native/codegen/package.json', { paths: [require.resolve('react-native/package.json')] })"].execute(null, rootDir).text.trim()).getParentFile().getAbsoluteFile()

    // ✅ CRITICAL: Use Expo CLI for bundling to enable expo-updates
    cliFile = new File(["node", "--print", "require.resolve('@expo/cli', { paths: [require.resolve('expo/package.json')] })"].execute(null, rootDir).text.trim())
    bundleCommand = "export:embed"
    
    // Bundle compression for smaller APK size
    enableBundleCompression = (findProperty('android.enableBundleCompression') ?: true).toBoolean()

    /* Autolinking - this includes expo-updates automatically */
    autolinkLibrariesWithApp()
}

/**
 * ✅ VERSION MANAGEMENT
 * Update these values for each release:
 * - appVersionName: Semantic version (e.g., "1.8.5")
 * - appVersionCode: Incremental integer (e.g., 1, 2, 3...)
 * * IMPORTANT: appVersionName MUST match "runtimeVersion" in app.json
 */
def appName = "GLT"
def appVersionName = "1.8.5"  // ⚠️ Must match app.json runtimeVersion
def appVersionCode = 2        // ⚠️ Increment for each release
def buildTimestamp = new Date().format('yyyyMMdd-HHmm')

/**
 * Build Optimization Settings
 */
def enableProguardInReleaseBuilds = (findProperty('android.enableProguardInReleaseBuilds') ?: true).toBoolean()
def enableShrinkResourcesInReleaseBuilds = (findProperty('android.enableShrinkResourcesInReleaseBuilds') ?: true).toBoolean()

/**
 * JavaScriptCore Flavor
 */
def jscFlavor = 'io.github.react-native-community:jsc-android:+'

android {
    ndkVersion rootProject.ext.ndkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion
    compileSdk rootProject.ext.compileSdkVersion

    namespace 'com.lvl0_x.gltapp2'
    
    defaultConfig {
        applicationId 'com.lvl0_x.gltapp2'
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        
        // ✅ App versioning
        versionCode 1
        versionName appVersionName
        
        // ✅ App metadata - accessible at runtime
        resValue "string", "app_name", appName
        resValue "string", "app_version", appVersionName
        resValue "string", "build_number", appVersionCode.toString()
        resValue "string", "build_timestamp", buildTimestamp
        
        // ✅ BuildConfig fields for programmatic access
        buildConfigField "String", "VERSION_NAME", "\"${appVersionName}\""
        buildConfigField "int", "VERSION_CODE", "${appVersionCode}"
        buildConfigField "String", "APP_NAME", "\"${appName}\""
        buildConfigField "String", "BUILD_TIMESTAMP", "\"${buildTimestamp}\""
        
        // ✅ Enable multidex for better compatibility
        multiDexEnabled true
        
        // ✅ OAuth redirect scheme configuration
        manifestPlaceholders += [
            appAuthRedirectScheme: 'com.lvl0_x.gltapp2',
            oauthRedirectHost: 'oauth',
            oauthRedirectScheme: 'https'
        ]
        
        // ⚠️ IMPORTANT: DO NOT manually add EXPO_UPDATES_* here
        // expo-updates plugin handles this automatically from app.json
    }
    
    signingConfigs {
        debug {
            storeFile file('debug.keystore')
            storePassword 'android'
            keyAlias 'androiddebugkey'
            keyPassword 'android'
        }
        
        // ✅ TODO: Add release signing config for production
        // release {
        //     storeFile file('release.keystore')
        //     storePassword System.getenv("RELEASE_STORE_PASSWORD")
        //     keyAlias System.getenv("RELEASE_KEY_ALIAS")
        //     keyPassword System.getenv("RELEASE_KEY_PASSWORD")
        // }
    }
    
    buildTypes {
        debug {
            signingConfig signingConfigs.debug
            
            // ✅ Debug identification
            resValue "string", "app_name", "${appName} (Debug)"
            versionNameSuffix "-debug-${buildTimestamp}"
            
            // ✅ Debug build config
            buildConfigField "boolean", "IS_DEBUG", "true"
            buildConfigField "String", "BUILD_TYPE", "\"debug\""
            
            // ⬇️ FIXED: Manually add missing field for expo-updates/dev-launcher
            buildConfigField "String", "REACT_NATIVE_RELEASE_LEVEL", "\"DEBUG\""
            
            // ✅ Debug OAuth environment
            manifestPlaceholders += [
                oauthEnvironment: 'development'
            ]
            
            // Disable minification for faster debug builds
            minifyEnabled false
            shrinkResources false
        }
        
        release {
            // ✅ Use debug signing for now (change to signingConfigs.release in production)
            signingConfig signingConfigs.debug
            
            // ✅ Release optimization
            minifyEnabled enableProguardInReleaseBuilds
            shrinkResources enableShrinkResourcesInReleaseBuilds
            proguardFiles getDefaultProguardFile("proguard-android-optimize.txt"), "proguard-rules.pro"
            
            // ✅ PNG optimization
            crunchPngs true
            
            // ✅ Release build config
            buildConfigField "boolean", "IS_DEBUG", "false"
            buildConfigField "String", "BUILD_TYPE", "\"release\""
            
            // ⬇️ FIXED: Manually add missing field for expo-updates
            buildConfigField "String", "REACT_NATIVE_RELEASE_LEVEL", "\"RELEASE\""

            // ✅ Production OAuth environment
            manifestPlaceholders += [
                oauthEnvironment: 'production'
            ]
        }
    }
    
    // ✅ Java compatibility
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }
    
    kotlinOptions {
        jvmTarget = '17'
    }
    
    // ✅ APK Output Configuration
    applicationVariants.all { variant ->
        variant.outputs.all { output ->
            def buildType = variant.buildType.name
            def versionName = variant.versionName
            def versionCode = variant.versionCode
            
            if (buildType == "release") {
                // ✅ Release APK: GLT-1.8.5-2.apk
                outputFileName = "${appName}-${appVersionName}-${versionCode}.apk"
            } else if (buildType == "debug") {
                // ✅ Debug APK: GLT-1.8.5-debug-20250126-1430-2.apk
                outputFileName = "${appName}-${appVersionName}-debug-${buildTimestamp}-${versionCode}.apk"
            }
            
            // ✅ Log build information
            println "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
            println "📦 Build Output Configuration"
            println "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
            println "APK Name:    ${outputFileName}"
            println "Package:     com.lvl0_x.gltapp2"
            println "Version:     ${versionName} (${versionCode})"
            println "Build Type:  ${buildType}"
            println "Output Path: ${output.outputFile.parentFile}"
            println "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
        }
    }
    
    packagingOptions {
        jniLibs {
            useLegacyPackaging (findProperty('expo.useLegacyPackaging')?.toBoolean() ?: false)
        }
    }
    
    androidResources {
        ignoreAssetsPattern '!.svn:!.git:!.ds_store:!*.scc:!CVS:!thumbs.db:!picasa.ini:!*~'
    }
}

// ✅ Apply static values from gradle.properties to packagingOptions
["pickFirsts", "excludes", "merges", "doNotStrip"].each { prop ->
    def options = (findProperty("android.packagingOptions.$prop") ?: "").split(",");
    for (i in 0..<options.size()) options[i] = options[i].trim();
    options -= ""

    if (options.length > 0) {
        println "android.packagingOptions.$prop += $options ($options.length)"
        options.each {
            android.packagingOptions[prop] += it
        }
    }
}

dependencies {
    // ✅ React Native core
    implementation("com.facebook.react:react-android")

    // ✅ Firebase Dependencies
    implementation platform('com.google.firebase:firebase-bom:33.1.2')
    implementation 'com.google.firebase:firebase-messaging'
    implementation 'com.google.firebase:firebase-analytics'
    implementation 'com.google.firebase:firebase-inappmessaging-display'
    
    // ✅ Google Play Services (required for FCM)
    implementation 'com.google.android.gms:play-services-base:18.2.0'

    // ✅ Image format support
    def isGifEnabled = (findProperty('expo.gif.enabled') ?: "") == "true"
    def isWebpEnabled = (findProperty('expo.webp.enabled') ?: "") == "true"
    def isWebpAnimatedEnabled = (findProperty('expo.webp.animated') ?: "") == "true"

    if (isGifEnabled) {
        implementation("com.facebook.fresco:animated-gif:3.1.3")
    }

    if (isWebpEnabled) {
        implementation("com.facebook.fresco:webpsupport:3.1.3")
        if (isWebpAnimatedEnabled) {
            implementation("com.facebook.fresco:animated-webp:3.1.3")
        }
    }

    // ✅ JavaScript engine
    if (hermesEnabled.toBoolean()) {
        implementation("com.facebook.react:hermes-android")
    } else {
        implementation jscFlavor
    }
    
    // ✅ Multidex support
    implementation 'androidx.multidex:multidex:2.0.1'
}

// ✅ Verify expo-updates is enabled after evaluation
afterEvaluate {
    println ""
    println "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
    println "🔍 Expo Updates Configuration Check"
    println "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
    
    // Check if expo-updates tasks are available
    def hasUpdatesTask = tasks.findByName('createReleaseUpdatesResources') != null
    
    if (hasUpdatesTask) {
        println "✅ expo-updates is ENABLED and configured"
        println "   Task found: createReleaseUpdatesResources"
        println "   Configuration source: app.json"
        println "   Runtime version: ${appVersionName}"
    } else {
        println "⚠️  WARNING: expo-updates tasks not found!"
        println "   Expected task: createReleaseUpdatesResources"
        println "   This means OTA updates will NOT work."
        println ""
        println "   Troubleshooting steps:"
        println "   1. Ensure expo-updates is installed: npm list expo-updates"
        println "   2. Clean build: ./gradlew clean"
        println "   3. Check app.json has updates.enabled = true"
        println "   4. Verify autolinking: npx expo-modules-autolinking resolve --platform android"
    }
    
    println "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
    println ""
}

/*
 * ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
 * 📋 CONFIGURATION SUMMARY
 * ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
 * 
 * ✅ EXPO UPDATES (Autolinked via expo-modules-autolinking):
 *    - Plugin: Automatically applied through autolinking
 *    - Configuration: Read from app.json
 *    - Runtime Version: Must match appVersionName (1.8.5)
 *    - Update URL: From app.json updates.url
 *    - Build Task: createReleaseUpdatesResources (auto-generated)
 * 
 * ✅ REQUIRED IN app.json:
 *    {
 *      "expo": {
 *        "runtimeVersion": "1.8.5",  // ⚠️ MUST match appVersionName
 *        "updates": {
 *          "enabled": true,
 *          "url": "https://u.expo.dev/cd8db67e-8126-40ba-9bb0-aaadbb5bbbf7"
 *        }
 *      }
 *    }
 * 
 * ✅ APK OUTPUTS:
 *    - Release: android/app/build/outputs/apk/release/GLT-1.8.5-2.apk
 *    - Debug:   android/app/build/outputs/apk/debug/GLT-1.8.5-debug-YYYYMMDD-HHMM-2.apk
 * 
 * ✅ FIREBASE FCM:
 *    - Configuration: android/app/google-services.json
 *    - Dependencies: firebase-bom, firebase-messaging
 *    - Notification Icon: android/app/src/main/res/drawable/notification_icon.png
 * 
 * ✅ BUILD COMMANDS:
 *    - Clean:   cd android && ./gradlew clean
 *    - Debug:   cd android && ./gradlew assembleDebug
 *    - Release: cd android && ./gradlew assembleRelease
 *    - Bundle:  cd android && ./gradlew bundleRelease
 * 
 * ✅ VERIFY EXPO UPDATES:
 *    1. Build the app: ./gradlew assembleRelease
 *    2. Check for task: grep "createReleaseUpdatesResources" in build output
 *    3. Install APK and check: Updates.isEnabled === true
 *    4. Publish update: eas update --branch production
 *    5. Relaunch app - update should download
 * 
 * ⚠️ CRITICAL NOTES:
 *    - DO NOT manually add: apply plugin: 'expo-updates'
 *    - DO NOT manually set EXPO_UPDATES_* in manifestPlaceholders
 *    - Ensure app.json runtimeVersion matches appVersionName
 *    - expo-updates is configured through expo-modules-autolinking
 *    - If updates don't work, check afterEvaluate output above
 * 
 * 🔧 TROUBLESHOOTING:
 *    If expo-updates is not working:
 *    1. rm -rf android/.gradle android/build android/app/build
 *    2. ./gradlew clean
 *    3. Check: npx expo-modules-autolinking resolve --platform android
 *    4. Verify expo-updates appears in autolinking output
 *    5. ./gradlew assembleRelease --info | grep "expo-updates"
 * 
 * ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
 */