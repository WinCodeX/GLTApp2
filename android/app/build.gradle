apply plugin: "com.android.application"
apply plugin: "org.jetbrains.kotlin.android"
apply plugin: "com.facebook.react"

def projectRoot = rootDir.getAbsoluteFile().getParentFile().getAbsolutePath()

react {
    entryFile = file(["node", "-e", "require('expo/scripts/resolveAppEntry')", projectRoot, "android", "absolute"].execute(null, rootDir).text.trim())
    reactNativeDir = new File(["node", "--print", "require.resolve('react-native/package.json')"].execute(null, rootDir).text.trim()).getParentFile().getAbsoluteFile()
    hermesCommand = new File(["node", "--print", "require.resolve('react-native/package.json')"].execute(null, rootDir).text.trim()).getParentFile().getAbsolutePath() + "/sdks/hermesc/%OS-BIN%/hermesc"
    codegenDir = new File(["node", "--print", "require.resolve('@react-native/codegen/package.json', { paths: [require.resolve('react-native/package.json')] })"].execute(null, rootDir).text.trim()).getParentFile().getAbsoluteFile()

    enableBundleCompression = (findProperty('android.enableBundleCompression') ?: false).toBoolean()
    cliFile = new File(["node", "--print", "require.resolve('@expo/cli', { paths: [require.resolve('expo/package.json')] })"].execute(null, rootDir).text.trim())
    bundleCommand = "export:embed"

    autolinkLibrariesWithApp()
}

def enableProguardInReleaseBuilds = (findProperty('android.enableProguardInReleaseBuilds') ?: false).toBoolean()
def jscFlavor = 'io.github.react-native-community:jsc-android:2026004.+'

// Define app version constants for consistency
def appName = "GLT"
def appVersionName = "1.3.2"
def appVersionCode = 3
def buildTimestamp = new Date().format('yyyyMMdd-HHmm')

android {
    ndkVersion rootProject.ext.ndkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion
    compileSdk rootProject.ext.compileSdkVersion

    namespace 'com.lvl0_x.gltapp2'
    defaultConfig {
        applicationId 'com.lvl0_x.gltapp2'
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode 1
        versionName appVersionName
        
        // App display name and metadata
        resValue "string", "app_name", appName
        resValue "string", "app_version", appVersionName
        resValue "string", "build_number", appVersionCode.toString()
        resValue "string", "build_timestamp", buildTimestamp
        
        // Add version info to build config for runtime access
        buildConfigField "String", "VERSION_NAME", "\"${appVersionName}\""
        buildConfigField "int", "VERSION_CODE", "${appVersionCode}"
        buildConfigField "String", "APP_NAME", "\"${appName}\""
        buildConfigField "String", "BUILD_TIMESTAMP", "\"${buildTimestamp}\""
        
        // Enable multidex for better Bluetooth compatibility
        multiDexEnabled true
        
        // âœ… SIMPLIFIED: Remove problematic manifest placeholders
        // Let Expo handle OAuth configuration automatically
    }
    
    signingConfigs {
        debug {
            storeFile file('debug.keystore')
            storePassword 'android'
            keyAlias 'androiddebugkey'
            keyPassword 'android'
        }
    }
    
    buildTypes {
        debug {
            signingConfig signingConfigs.debug
            // Debug identification through app name and version
            resValue "string", "app_name", "${appName} (Debug)"
            versionNameSuffix "-debug-${buildTimestamp}"
            
            // Debug-specific build config
            buildConfigField "boolean", "IS_DEBUG", "true"
            buildConfigField "String", "BUILD_TYPE", '"debug"'
        }
        release {
            signingConfig signingConfigs.debug
            shrinkResources (findProperty('android.enableShrinkResourcesInReleaseBuilds')?.toBoolean() ?: false)
            minifyEnabled enableProguardInReleaseBuilds
            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
            crunchPngs (findProperty('android.enablePngCrunchInReleaseBuilds')?.toBoolean() ?: true)
            
            buildConfigField "boolean", "IS_DEBUG", "false"
            buildConfigField "String", "BUILD_TYPE", '"release"'
        }
    }
    
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    
    // Custom APK naming configuration
    applicationVariants.all { variant ->
        variant.outputs.all {
            def buildType = variant.buildType.name
            def versionName = variant.versionName
            def versionCode = variant.versionCode
            
            if (buildType == "release") {
                outputFileName = "${appName}-${versionName}-${versionCode}.apk"
            } else if (buildType == "debug") {
                outputFileName = "${appName}-${versionName}-debug-${buildTimestamp}-${versionCode}.apk"
            }
            
            println "Generated APK name: ${outputFileName}"
            println "Package name: com.lvl0_x.gltapp2"
        }
    }
    
    packagingOptions {
        jniLibs {
            useLegacyPackaging (findProperty('expo.useLegacyPackaging')?.toBoolean() ?: false)
        }
    }
    
    androidResources {
        ignoreAssetsPattern '!.svn:!.git:!.ds_store:!*.scc:!CVS:!thumbs.db:!picasa.ini:!*~'
    }
}

// Apply static values from gradle.properties
["pickFirsts", "excludes", "merges", "doNotStrip"].each { prop ->
    def options = (findProperty("android.packagingOptions.$prop") ?: "").split(",");
    for (i in 0..<options.size()) options[i] = options[i].trim();
    options -= ""

    if (options.length > 0) {
        println "android.packagingOptions.$prop += $options ($options.length)"
        options.each {
            android.packagingOptions[prop] += it
        }
    }
}

dependencies {
    implementation("com.facebook.react:react-android")

    def isGifEnabled = (findProperty('expo.gif.enabled') ?: "") == "true";
    def isWebpEnabled = (findProperty('expo.webp.enabled') ?: "") == "true";
    def isWebpAnimatedEnabled = (findProperty('expo.webp.animated') ?: "") == "true";

    if (isGifEnabled) {
        implementation("com.facebook.fresco:animated-gif:${expoLibs.versions.fresco.get()}")
    }

    if (isWebpEnabled) {
        implementation("com.facebook.fresco:webpsupport:${expoLibs.versions.fresco.get()}")
        if (isWebpAnimatedEnabled) {
            implementation("com.facebook.fresco:animated-webp:${expoLibs.versions.fresco.get()}")
        }
    }

    if (hermesEnabled.toBoolean()) {
        implementation("com.facebook.react:hermes-android")
    } else {
        implementation jscFlavor
    }
    
    implementation 'androidx.multidex:multidex:2.0.1'
}